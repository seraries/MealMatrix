/* This class creates as many meals as the user wants by randomly selecting 
 * ingredients (at the number of items per food type per meal that the user has 
 * chosen) from the food lists. It then returns a list of these meals.
 * It is controlled by MakeRandomMealsServlet.
 *
 * @version v.15 1-18-2017 (no modification needed from v14 to v15)
 * @author Sarah Richardson
 */

package com.richardsonprogramming.matrix.model;

import java.io.*;
import java.util.*;

public class MealMaker {

	public static List<String> getMealsList(List<List<Food>> allFoodTypeLists, 
			List<Integer> numberOfItemsByFoodTypeList, int numberOfMeals) {

		// list of all the random-gen meals
		List<String> mealsList = new ArrayList<String>();
		
		// for each meal, get randomly generated ingredients for each food type
		// and add this meal to the list of all meals
		for (int meals = 0; meals < numberOfMeals; meals++) {
			// reset for each meal
	   		String oneMealList = ""; 

	   		// reset for each meal; this tracks which food type we're on 
	   		// so I get the right number of items for it
	   		int index = 0;  
	   		
	   		// for each food type, get randomly generated ingredients
	   		// and add these to the meal list for one meal
	   		for (List<Food> oneFoodTypeList : allFoodTypeLists) {
	   			// reset this each food type list, holds ingredients for 1 food type
	   			String itemsList = ""; 
	   			// how many ingredients to get for this food type
	   			int numberOfItems = numberOfItemsByFoodTypeList.get(index);
	   			// add ingredients to itemsList
			   	itemsList += getIngredients(oneFoodTypeList, numberOfItems);
			   	// add this food type's item list to the meal list for this meal
			   	oneMealList += itemsList;
			   	index++;
	   		}
	   		mealsList.add(oneMealList);
	   	}
	   	return mealsList;
	}

	// generates random, non-duplicated variety of items for a given food type 
	private static String getIngredients(List<Food> oneFoodTypeList, 
											int numberOfItems) {
		// holds numbers that have already been generated for this type
		Set<Integer> randomInts = new HashSet<Integer>();
		// holds the randomly selected items
		String items = "";
		
		for (int count = 0; count < numberOfItems; count++) {
			
			int randInt = getRandInt(oneFoodTypeList.size());
			// to ensure we are getting unique items for this food type in a 
			// given meal, check that this int hasn't already been generated by
			// looking in the HashSet-if it contains int, generate another one
			while (randomInts.contains(randInt)) {
				randInt = getRandInt(oneFoodTypeList.size());
			}
			// get the corresponding food from the food list
	   		items += oneFoodTypeList.get(randInt);
	   		// if this is last ingredient for this food type, add a semicolon
	   		// else, add a comma between foods of same type
	   		if (count == numberOfItems - 1){
	   			items += "; "; 
	   		} else {
	   			items += ", "; 
	   		}
	   		randomInts.add(randInt); 
		}
		 
		return items;
	}

	// generates a random number 
	private static int getRandInt(int max){
		return (int)(Math.random() * max);
	}

}